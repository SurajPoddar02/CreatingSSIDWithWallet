{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "certificationID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "identityID",
          "type": "uint256"
        }
      ],
      "name": "CertificationIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "IdentityCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "dob",
          "type": "uint256"
        }
      ],
      "name": "createIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedId",
          "type": "uint256"
        }
      ],
      "name": "getIdentity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "dob",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "certificationIDs",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct SSIDWithWallet.Identity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "identityID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "issueDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "name": "issueCertification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "certificationID",
          "type": "uint256"
        }
      ],
      "name": "verifyCertification",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc78dd50cb66b03fe8d71b54aa6b63f4fbc9db455446c55430ee564127ab05144",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1646356",
    "logsBloom": "0x
    "blockHash": "0x270907dd8be5516eb4a8284dad661ba6b26b5e312476da04c1b43c3e4f701ab5",
    "transactionHash": "0xc78dd50cb66b03fe8d71b54aa6b63f4fbc9db455446c55430ee564127ab05144",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1646356",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "13127bc0e51da0775e717ab18dcd46ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"certificationID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"identityID\",\"type\":\"uint256\"}],\"name\":\"CertificationIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dob\",\"type\":\"uint256\"}],\"name\":\"createIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedId\",\"type\":\"uint256\"}],\"name\":\"getIdentity\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dob\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"certificationIDs\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SSIDWithWallet.Identity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identityID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"name\":\"issueCertification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificationID\",\"type\":\"uint256\"}],\"name\":\"verifyCertification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SSIDWithWallet.sol\":\"SSIDWithWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/SSIDWithWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract SSIDWithWallet {\\n    struct Identity {\\n        uint256 id;\\n        string name;\\n        string email;\\n        uint256 dob;\\n        address wallet;\\n        uint256[] certificationIDs;\\n    }\\n\\n    struct Certification {\\n        uint256 id;\\n        string name;\\n        uint256 issueDate;\\n        bool verified;\\n    }\\n\\n    mapping(address => Identity) private identities;\\n    mapping(uint256 => Certification) private certifications;\\n\\n    event IdentityCreated(address indexed owner, uint256 id);\\n    event CertificationIssued(uint256 indexed certificationID, uint256 indexed identityID);\\n\\n    function createIdentity(string memory name, string memory email, uint256 dob) public {\\n        \\n        Identity storage newIdentity = identities[msg.sender];\\n        newIdentity.id = block.timestamp;\\n        newIdentity.name = name;\\n        newIdentity.email = email;\\n        newIdentity.dob = dob;\\n        newIdentity.wallet = address(new Wallet(msg.sender));\\n\\n        emit IdentityCreated(msg.sender, newIdentity.id);\\n    }\\n\\n    function issueCertification(\\n        uint256 identityID,\\n        string memory name,\\n        uint256 issueDate,\\n        bool verified\\n    ) public {\\n        Identity storage identity = identities[msg.sender];\\n        require(identity.id == identityID, \\\"Invalid Identity\\\");\\n\\n        uint256 certificationID = block.timestamp;\\n        Certification storage certification = certifications[certificationID];\\n        certification.id = certificationID;\\n        certification.name = name;\\n        certification.issueDate = issueDate;\\n        certification.verified = verified;\\n\\n        identity.certificationIDs.push(certificationID);\\n\\n        emit CertificationIssued(certificationID, identityID);\\n    }\\n\\n    function verifyCertification(uint256 certificationID) public view returns (bool) {\\n        Certification memory certification = certifications[certificationID];\\n        return certification.verified;\\n    }\\n\\n    function getIdentity(uint256 providedId) public view returns (Identity memory) {\\n        Identity memory storedIdentity = identities[msg.sender];\\n        require(storedIdentity.id == providedId, \\\"Provided SSID does not match the stored SSID\\\");\\n        return storedIdentity;\\n    }\\n}\\n\\ncontract Wallet {\\n    using SafeERC20 for IERC20;\\n\\n    address private owner;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    function transfer(address to, uint256 amount, IERC20 token) external {\\n        require(msg.sender == owner, \\\"Only owner can transfer\\\");\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xff849fa7722716d0ccd881d062bea717c750c9097fb1ba24f1b3ca0769aa89f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611cf9806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063584f09b0146200005757806385e3f05814620000775780638ef761eb14620000ad5780639f06c39514620000cd575b600080fd5b6200007560048036038101906200006f919062000944565b62000103565b005b6200009560048036038101906200008f9190620009de565b62000254565b604051620000a4919062000c4f565b60405180910390f35b620000cb6004803603810190620000c5919062000cb0565b620004f5565b005b620000eb6004803603810190620000e59190620009de565b62000640565b604051620000fa919062000d52565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600001819055508381600101908162000161919062000fa5565b508281600201908162000175919062000fa5565b50818160030181905550336040516200018e9062000739565b6200019a91906200109d565b604051809103906000f080158015620001b7573d6000803e3d6000fd5b508160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fe8d47b56e8cdfa95f871b19d4f50a857217c44a95502b0811a350fec1500dd678260000154604051620002469190620010cb565b60405180910390a250505050565b6200025e62000747565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c001604052908160008201548152602001600182018054620002c59062000d9e565b80601f0160208091040260200160405190810160405280929190818152602001828054620002f39062000d9e565b8015620003445780601f10620003185761010080835404028352916020019162000344565b820191906000526020600020905b8154815290600101906020018083116200032657829003601f168201915b505050505081526020016002820180546200035f9062000d9e565b80601f01602080910402602001604051908101604052809291908181526020018280546200038d9062000d9e565b8015620003de5780601f10620003b257610100808354040283529160200191620003de565b820191906000526020600020905b815481529060010190602001808311620003c057829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054806020026020016040519081016040528092919081815260200182805480156200049857602002820191906000526020600020905b81548152602001906001019080831162000483575b505050505081525050905082816000015114620004ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004e3906200116f565b60405180910390fd5b80915050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508481600001541462000580576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057790620011e1565b60405180910390fd5b6000429050600060016000838152602001908152602001600020905081816000018190555085816001019081620005b8919062000fa5565b50848160020181905550838160030160006101000a81548160ff0219169083151502179055508260050182908060018154018082558091505060019003906000526020600020016000909190919091505586827fab19da658c28f4ed25fc505084caa0491e995cc05e8f0972e1a239620dfaafba60405160405180910390a350505050505050565b60008060016000848152602001908152602001600020604051806080016040529081600082015481526020016001820180546200067d9062000d9e565b80601f0160208091040260200160405190810160405280929190818152602001828054620006ab9062000d9e565b8015620006fc5780601f10620006d057610100808354040283529160200191620006fc565b820191906000526020600020905b815481529060010190602001808311620006de57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151915050919050565b610ac0806200120483390190565b6040518060c0016040528060008152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007fc82620007b1565b810181811067ffffffffffffffff821117156200081e576200081d620007c2565b5b80604052505050565b60006200083362000793565b9050620008418282620007f1565b919050565b600067ffffffffffffffff821115620008645762000863620007c2565b5b6200086f82620007b1565b9050602081019050919050565b82818337600083830152505050565b6000620008a26200089c8462000846565b62000827565b905082815260208101848484011115620008c157620008c0620007ac565b5b620008ce8482856200087c565b509392505050565b600082601f830112620008ee57620008ed620007a7565b5b8135620009008482602086016200088b565b91505092915050565b6000819050919050565b6200091e8162000909565b81146200092a57600080fd5b50565b6000813590506200093e8162000913565b92915050565b60008060006060848603121562000960576200095f6200079d565b5b600084013567ffffffffffffffff811115620009815762000980620007a2565b5b6200098f86828701620008d6565b935050602084013567ffffffffffffffff811115620009b357620009b2620007a2565b5b620009c186828701620008d6565b9250506040620009d4868287016200092d565b9150509250925092565b600060208284031215620009f757620009f66200079d565b5b600062000a07848285016200092d565b91505092915050565b62000a1b8162000909565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000a5d57808201518184015260208101905062000a40565b60008484015250505050565b600062000a768262000a21565b62000a82818562000a2c565b935062000a9481856020860162000a3d565b62000a9f81620007b1565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ad78262000aaa565b9050919050565b62000ae98162000aca565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062000b29838362000a10565b60208301905092915050565b6000602082019050919050565b600062000b4f8262000aef565b62000b5b818562000afa565b935062000b688362000b0b565b8060005b8381101562000b9f57815162000b83888262000b1b565b975062000b908362000b35565b92505060018101905062000b6c565b5085935050505092915050565b600060c08301600083015162000bc6600086018262000a10565b506020830151848203602086015262000be0828262000a69565b9150506040830151848203604086015262000bfc828262000a69565b915050606083015162000c13606086018262000a10565b50608083015162000c28608086018262000ade565b5060a083015184820360a086015262000c42828262000b42565b9150508091505092915050565b6000602082019050818103600083015262000c6b818462000bac565b905092915050565b60008115159050919050565b62000c8a8162000c73565b811462000c9657600080fd5b50565b60008135905062000caa8162000c7f565b92915050565b6000806000806080858703121562000ccd5762000ccc6200079d565b5b600062000cdd878288016200092d565b945050602085013567ffffffffffffffff81111562000d015762000d00620007a2565b5b62000d0f87828801620008d6565b935050604062000d22878288016200092d565b925050606062000d358782880162000c99565b91505092959194509250565b62000d4c8162000c73565b82525050565b600060208201905062000d69600083018462000d41565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000db757607f821691505b60208210810362000dcd5762000dcc62000d6f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000e377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000df8565b62000e43868362000df8565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000e8662000e8062000e7a8462000909565b62000e5b565b62000909565b9050919050565b6000819050919050565b62000ea28362000e65565b62000eba62000eb18262000e8d565b84845462000e05565b825550505050565b600090565b62000ed162000ec2565b62000ede81848462000e97565b505050565b5b8181101562000f065762000efa60008262000ec7565b60018101905062000ee4565b5050565b601f82111562000f555762000f1f8162000dd3565b62000f2a8462000de8565b8101602085101562000f3a578190505b62000f5262000f498562000de8565b83018262000ee3565b50505b505050565b600082821c905092915050565b600062000f7a6000198460080262000f5a565b1980831691505092915050565b600062000f95838362000f67565b9150826002028217905092915050565b62000fb08262000a21565b67ffffffffffffffff81111562000fcc5762000fcb620007c2565b5b62000fd8825462000d9e565b62000fe582828562000f0a565b600060209050601f8311600181146200101d576000841562001008578287015190505b62001014858262000f87565b86555062001084565b601f1984166200102d8662000dd3565b60005b82811015620010575784890151825560018201915060208501945060208101905062001030565b8683101562001077578489015162001073601f89168262000f67565b8355505b6001600288020188555050505b505050505050565b620010978162000aca565b82525050565b6000602082019050620010b460008301846200108c565b92915050565b620010c58162000909565b82525050565b6000602082019050620010e26000830184620010ba565b92915050565b600082825260208201905092915050565b7f50726f7669646564205353494420646f6573206e6f74206d617463682074686560008201527f2073746f72656420535349440000000000000000000000000000000000000000602082015250565b600062001157602c83620010e8565b91506200116482620010f9565b604082019050919050565b600060208201905081810360008301526200118a8162001148565b9050919050565b7f496e76616c6964204964656e7469747900000000000000000000000000000000600082015250565b6000620011c9601083620010e8565b9150620011d68262001191565b602082019050919050565b60006020820190508181036000830152620011fc81620011ba565b905091905056fe608060405234801561001057600080fd5b50604051610ac0380380610ac0833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6109a9806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063dbba0f0114610059575b600080fd5b610043610075565b60405161005091906104b7565b60405180910390f35b610073600480360381019061006e9190610577565b61009e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012390610627565b60405180910390fd5b61015783838373ffffffffffffffffffffffffffffffffffffffff1661015c9092919063ffffffff16565b505050565b6101dd8363a9059cbb60e01b848460405160240161017b929190610656565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506101e2565b505050565b6000610244826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166102a99092919063ffffffff16565b90506000815111156102a4578080602001905181019061026491906106b7565b6102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90610756565b60405180910390fd5b5b505050565b60606102b884846000856102c1565b90509392505050565b606082471015610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd906107e8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161032f9190610879565b60006040518083038185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50915091506103828783838761038e565b92505050949350505050565b606083156103f05760008351036103e8576103a885610403565b6103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de906108dc565b60405180910390fd5b5b8290506103fb565b6103fa8383610426565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156104395781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d9190610951565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a182610476565b9050919050565b6104b181610496565b82525050565b60006020820190506104cc60008301846104a8565b92915050565b600080fd5b6104e081610496565b81146104eb57600080fd5b50565b6000813590506104fd816104d7565b92915050565b6000819050919050565b61051681610503565b811461052157600080fd5b50565b6000813590506105338161050d565b92915050565b600061054482610496565b9050919050565b61055481610539565b811461055f57600080fd5b50565b6000813590506105718161054b565b92915050565b6000806000606084860312156105905761058f6104d2565b5b600061059e868287016104ee565b93505060206105af86828701610524565b92505060406105c086828701610562565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e207472616e73666572000000000000000000600082015250565b60006106116017836105ca565b915061061c826105db565b602082019050919050565b6000602082019050818103600083015261064081610604565b9050919050565b61065081610503565b82525050565b600060408201905061066b60008301856104a8565b6106786020830184610647565b9392505050565b60008115159050919050565b6106948161067f565b811461069f57600080fd5b50565b6000815190506106b18161068b565b92915050565b6000602082840312156106cd576106cc6104d2565b5b60006106db848285016106a2565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610740602a836105ca565b915061074b826106e4565b604082019050919050565b6000602082019050818103600083015261076f81610733565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006107d26026836105ca565b91506107dd82610776565b604082019050919050565b60006020820190508181036000830152610801816107c5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561083c578082015181840152602081019050610821565b60008484015250505050565b600061085382610808565b61085d8185610813565b935061086d81856020860161081e565b80840191505092915050565b60006108858284610848565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006108c6601d836105ca565b91506108d182610890565b602082019050919050565b600060208201905081810360008301526108f5816108b9565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610923826108fc565b61092d81856105ca565b935061093d81856020860161081e565b61094681610907565b840191505092915050565b6000602082019050818103600083015261096b8184610918565b90509291505056fea264697066735822122035f92815476344f4f490bc949c278dd3a5817452e439ae86b15c8e442a276abc64736f6c63430008120033a2646970667358221220db2b7cbf30ffddb940e0d63ed165fb726ca3ff29661ea5537c74297aa9220ffa64736f6c63430008120033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c8063584f09b0146200005757806385e3f05814620000775780638ef761eb14620000ad5780639f06c39514620000cd575b600080fd5b6200007560048036038101906200006f919062000944565b62000103565b005b6200009560048036038101906200008f9190620009de565b62000254565b604051620000a4919062000c4f565b60405180910390f35b620000cb6004803603810190620000c5919062000cb0565b620004f5565b005b620000eb6004803603810190620000e59190620009de565b62000640565b604051620000fa919062000d52565b60405180910390f35b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600001819055508381600101908162000161919062000fa5565b508281600201908162000175919062000fa5565b50818160030181905550336040516200018e9062000739565b6200019a91906200109d565b604051809103906000f080158015620001b7573d6000803e3d6000fd5b508160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fe8d47b56e8cdfa95f871b19d4f50a857217c44a95502b0811a350fec1500dd678260000154604051620002469190620010cb565b60405180910390a250505050565b6200025e62000747565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c001604052908160008201548152602001600182018054620002c59062000d9e565b80601f0160208091040260200160405190810160405280929190818152602001828054620002f39062000d9e565b8015620003445780601f10620003185761010080835404028352916020019162000344565b820191906000526020600020905b8154815290600101906020018083116200032657829003601f168201915b505050505081526020016002820180546200035f9062000d9e565b80601f01602080910402602001604051908101604052809291908181526020018280546200038d9062000d9e565b8015620003de5780601f10620003b257610100808354040283529160200191620003de565b820191906000526020600020905b815481529060010190602001808311620003c057829003601f168201915b50505050508152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054806020026020016040519081016040528092919081815260200182805480156200049857602002820191906000526020600020905b81548152602001906001019080831162000483575b505050505081525050905082816000015114620004ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004e3906200116f565b60405180910390fd5b80915050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508481600001541462000580576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057790620011e1565b60405180910390fd5b6000429050600060016000838152602001908152602001600020905081816000018190555085816001019081620005b8919062000fa5565b50848160020181905550838160030160006101000a81548160ff0219169083151502179055508260050182908060018154018082558091505060019003906000526020600020016000909190919091505586827fab19da658c28f4ed25fc505084caa0491e995cc05e8f0972e1a239620dfaafba60405160405180910390a350505050505050565b60008060016000848152602001908152602001600020604051806080016040529081600082015481526020016001820180546200067d9062000d9e565b80601f0160208091040260200160405190810160405280929190818152602001828054620006ab9062000d9e565b8015620006fc5780601f10620006d057610100808354040283529160200191620006fc565b820191906000526020600020905b815481529060010190602001808311620006de57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151915050919050565b610ac0806200120483390190565b6040518060c0016040528060008152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620007fc82620007b1565b810181811067ffffffffffffffff821117156200081e576200081d620007c2565b5b80604052505050565b60006200083362000793565b9050620008418282620007f1565b919050565b600067ffffffffffffffff821115620008645762000863620007c2565b5b6200086f82620007b1565b9050602081019050919050565b82818337600083830152505050565b6000620008a26200089c8462000846565b62000827565b905082815260208101848484011115620008c157620008c0620007ac565b5b620008ce8482856200087c565b509392505050565b600082601f830112620008ee57620008ed620007a7565b5b8135620009008482602086016200088b565b91505092915050565b6000819050919050565b6200091e8162000909565b81146200092a57600080fd5b50565b6000813590506200093e8162000913565b92915050565b60008060006060848603121562000960576200095f6200079d565b5b600084013567ffffffffffffffff811115620009815762000980620007a2565b5b6200098f86828701620008d6565b935050602084013567ffffffffffffffff811115620009b357620009b2620007a2565b5b620009c186828701620008d6565b9250506040620009d4868287016200092d565b9150509250925092565b600060208284031215620009f757620009f66200079d565b5b600062000a07848285016200092d565b91505092915050565b62000a1b8162000909565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000a5d57808201518184015260208101905062000a40565b60008484015250505050565b600062000a768262000a21565b62000a82818562000a2c565b935062000a9481856020860162000a3d565b62000a9f81620007b1565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ad78262000aaa565b9050919050565b62000ae98162000aca565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062000b29838362000a10565b60208301905092915050565b6000602082019050919050565b600062000b4f8262000aef565b62000b5b818562000afa565b935062000b688362000b0b565b8060005b8381101562000b9f57815162000b83888262000b1b565b975062000b908362000b35565b92505060018101905062000b6c565b5085935050505092915050565b600060c08301600083015162000bc6600086018262000a10565b506020830151848203602086015262000be0828262000a69565b9150506040830151848203604086015262000bfc828262000a69565b915050606083015162000c13606086018262000a10565b50608083015162000c28608086018262000ade565b5060a083015184820360a086015262000c42828262000b42565b9150508091505092915050565b6000602082019050818103600083015262000c6b818462000bac565b905092915050565b60008115159050919050565b62000c8a8162000c73565b811462000c9657600080fd5b50565b60008135905062000caa8162000c7f565b92915050565b6000806000806080858703121562000ccd5762000ccc6200079d565b5b600062000cdd878288016200092d565b945050602085013567ffffffffffffffff81111562000d015762000d00620007a2565b5b62000d0f87828801620008d6565b935050604062000d22878288016200092d565b925050606062000d358782880162000c99565b91505092959194509250565b62000d4c8162000c73565b82525050565b600060208201905062000d69600083018462000d41565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000db757607f821691505b60208210810362000dcd5762000dcc62000d6f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000e377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000df8565b62000e43868362000df8565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000e8662000e8062000e7a8462000909565b62000e5b565b62000909565b9050919050565b6000819050919050565b62000ea28362000e65565b62000eba62000eb18262000e8d565b84845462000e05565b825550505050565b600090565b62000ed162000ec2565b62000ede81848462000e97565b505050565b5b8181101562000f065762000efa60008262000ec7565b60018101905062000ee4565b5050565b601f82111562000f555762000f1f8162000dd3565b62000f2a8462000de8565b8101602085101562000f3a578190505b62000f5262000f498562000de8565b83018262000ee3565b50505b505050565b600082821c905092915050565b600062000f7a6000198460080262000f5a565b1980831691505092915050565b600062000f95838362000f67565b9150826002028217905092915050565b62000fb08262000a21565b67ffffffffffffffff81111562000fcc5762000fcb620007c2565b5b62000fd8825462000d9e565b62000fe582828562000f0a565b600060209050601f8311600181146200101d576000841562001008578287015190505b62001014858262000f87565b86555062001084565b601f1984166200102d8662000dd3565b60005b82811015620010575784890151825560018201915060208501945060208101905062001030565b8683101562001077578489015162001073601f89168262000f67565b8355505b6001600288020188555050505b505050505050565b620010978162000aca565b82525050565b6000602082019050620010b460008301846200108c565b92915050565b620010c58162000909565b82525050565b6000602082019050620010e26000830184620010ba565b92915050565b600082825260208201905092915050565b7f50726f7669646564205353494420646f6573206e6f74206d617463682074686560008201527f2073746f72656420535349440000000000000000000000000000000000000000602082015250565b600062001157602c83620010e8565b91506200116482620010f9565b604082019050919050565b600060208201905081810360008301526200118a8162001148565b9050919050565b7f496e76616c6964204964656e7469747900000000000000000000000000000000600082015250565b6000620011c9601083620010e8565b9150620011d68262001191565b602082019050919050565b60006020820190508181036000830152620011fc81620011ba565b905091905056fe608060405234801561001057600080fd5b50604051610ac0380380610ac0833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6109a9806101176000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063893d20e81461003b578063dbba0f0114610059575b600080fd5b610043610075565b60405161005091906104b7565b60405180910390f35b610073600480360381019061006e9190610577565b61009e565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012390610627565b60405180910390fd5b61015783838373ffffffffffffffffffffffffffffffffffffffff1661015c9092919063ffffffff16565b505050565b6101dd8363a9059cbb60e01b848460405160240161017b929190610656565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506101e2565b505050565b6000610244826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166102a99092919063ffffffff16565b90506000815111156102a4578080602001905181019061026491906106b7565b6102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90610756565b60405180910390fd5b5b505050565b60606102b884846000856102c1565b90509392505050565b606082471015610306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd906107e8565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161032f9190610879565b60006040518083038185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50915091506103828783838761038e565b92505050949350505050565b606083156103f05760008351036103e8576103a885610403565b6103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de906108dc565b60405180910390fd5b5b8290506103fb565b6103fa8383610426565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156104395781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046d9190610951565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104a182610476565b9050919050565b6104b181610496565b82525050565b60006020820190506104cc60008301846104a8565b92915050565b600080fd5b6104e081610496565b81146104eb57600080fd5b50565b6000813590506104fd816104d7565b92915050565b6000819050919050565b61051681610503565b811461052157600080fd5b50565b6000813590506105338161050d565b92915050565b600061054482610496565b9050919050565b61055481610539565b811461055f57600080fd5b50565b6000813590506105718161054b565b92915050565b6000806000606084860312156105905761058f6104d2565b5b600061059e868287016104ee565b93505060206105af86828701610524565b92505060406105c086828701610562565b9150509250925092565b600082825260208201905092915050565b7f4f6e6c79206f776e65722063616e207472616e73666572000000000000000000600082015250565b60006106116017836105ca565b915061061c826105db565b602082019050919050565b6000602082019050818103600083015261064081610604565b9050919050565b61065081610503565b82525050565b600060408201905061066b60008301856104a8565b6106786020830184610647565b9392505050565b60008115159050919050565b6106948161067f565b811461069f57600080fd5b50565b6000815190506106b18161068b565b92915050565b6000602082840312156106cd576106cc6104d2565b5b60006106db848285016106a2565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610740602a836105ca565b915061074b826106e4565b604082019050919050565b6000602082019050818103600083015261076f81610733565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006107d26026836105ca565b91506107dd82610776565b604082019050919050565b60006020820190508181036000830152610801816107c5565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561083c578082015181840152602081019050610821565b60008484015250505050565b600061085382610808565b61085d8185610813565b935061086d81856020860161081e565b80840191505092915050565b60006108858284610848565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006108c6601d836105ca565b91506108d182610890565b602082019050919050565b600060208201905081810360008301526108f5816108b9565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610923826108fc565b61092d81856105ca565b935061093d81856020860161081e565b61094681610907565b840191505092915050565b6000602082019050818103600083015261096b8184610918565b90509291505056fea264697066735822122035f92815476344f4f490bc949c278dd3a5817452e439ae86b15c8e442a276abc64736f6c63430008120033a2646970667358221220db2b7cbf30ffddb940e0d63ed165fb726ca3ff29661ea5537c74297aa9220ffa64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 756,
        "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
        "label": "identities",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Identity)742_storage)"
      },
      {
        "astId": 761,
        "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
        "label": "certifications",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Certification)751_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Identity)742_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SSIDWithWallet.Identity)",
        "numberOfBytes": "32",
        "value": "t_struct(Identity)742_storage"
      },
      "t_mapping(t_uint256,t_struct(Certification)751_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SSIDWithWallet.Certification)",
        "numberOfBytes": "32",
        "value": "t_struct(Certification)751_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Certification)751_storage": {
        "encoding": "inplace",
        "label": "struct SSIDWithWallet.Certification",
        "members": [
          {
            "astId": 744,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 746,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 748,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "issueDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 750,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "verified",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Identity)742_storage": {
        "encoding": "inplace",
        "label": "struct SSIDWithWallet.Identity",
        "members": [
          {
            "astId": 730,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 732,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 734,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 736,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "dob",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 738,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "wallet",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 741,
            "contract": "contracts/SSIDWithWallet.sol:SSIDWithWallet",
            "label": "certificationIDs",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}